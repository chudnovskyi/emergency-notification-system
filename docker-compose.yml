version: '3.8'
services:
  security-service-postgres:
    container_name: security-service-postgres
    hostname: security-service-postgres
    image: postgres:alpine3.17
    restart: always
    ports:
      - '5433:5432'
    environment:
      POSTGRES_DB: security
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data
    volumes:
      - db-postgres-security:/data

  recipient-service-postgres:
    container_name: recipient-service-postgres
    hostname: recipient-service-postgres
    image: postgres:alpine3.17
    restart: always
    ports:
      - '5435:5432'
    environment:
      POSTGRES_DB: recipient
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data
    volumes:
      - db-postgres-recipient:/data

  template-service-postgres:
    container_name: template-service-postgres
    hostname: template-service-postgres
    image: postgres:alpine3.17
    restart: always
    ports:
      - '5434:5432'
    environment:
      POSTGRES_DB: template
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    volumes:
      - db-postgres-template:/data

  notification-service-postgres:
    container_name: notification-service-postgres
    hostname: notification-service-postgres
    image: postgres:alpine3.17
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: notification
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data
    volumes:
      - db-postgres-notification:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  discovery-server:
    image: v1acheslav/discovery-server:1.0.1
    restart: always
    ports:
      - '8761:8761'

  api-gateway:
    image: v1acheslav/api-gateway:1.0.1
    restart: always
    ports:
      - '8080:8080'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server

  security-service:
    image: v1acheslav/security-service:1.0.5
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - security-service-postgres
      - discovery-server
      - api-gateway

  recipient-service:
    image: v1acheslav/recipient-service:1.0.3
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - recipient-service-postgres
      - discovery-server
      - api-gateway
      - zookeeper
      - broker

  template-service:
    image: v1acheslav/template-service:1.0.3
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - template-service-postgres
      - discovery-server
      - api-gateway
      - zookeeper
      - broker

  notification-service:
    image: v1acheslav/notification-service:1.0.3
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - notification-service-postgres
      - discovery-server
      - api-gateway
      - zookeeper
      - broker

  sender-service:
    image: v1acheslav/sender-service:1.0.3
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server
      - zookeeper
      - broker

  file-service:
    image: v1acheslav/file-service:1.0.1
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server
      - api-gateway

  telegram-bot-service:
    image: v1acheslav/telegram-bot-service:1.0.1
    restart: always

volumes:
  db-postgres: { }
  db-postgres-security: { }
  db-postgres-template: { }
  db-postgres-recipient: { }
  db-postgres-notification: { }
